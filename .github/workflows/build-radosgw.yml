---
name: Build Radosgw
on:
  schedule:
    - cron: '0 0 * * 0'  # refresh ccache every sunday night

  push:
    tags:
      - "s3gw-v*"

  workflow_call:
    secrets:
      DOCKERHUB_USERNAME:
        description: Username for Dockerhub account
        required: true
      DOCKERHUB_TOKEN:
        description: Access token for Dockerhub account
        required: true
    inputs:
      strip_binaries:
        description: Strip the binaries of debug symbols
        default: true
        required: false
        type: boolean
    outputs:
      artifact_id:
        description: Artifact ID for the build artifacts
        value: ${{ jobs.build.outputs.artifact_id }}
      short_sha:
        description: Short Git Sha
        value: ${{ jobs.build-container.outputs.short_sha }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      artifact_id: ${{ steps.artifact_id.outputs.artifact_id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: ceph
          submodules: recursive

      - name: Create CCache Timestamp
        id: ccache_timestamp
        run: |
          echo "::set-output name=timestamp::$(date +%Y-%m-%d-%H:%M:%S)"

      - name: Cache CCache Files
        uses: actions/cache@v3.0.4
        with:
          path: ceph/build.ccache
          key: ccache-${{ steps.ccache_timestamp.outputs.timestamp }}
          restore-keys: |
            ccache-

      - name: Build radosgw Binary
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          docker run --rm \
            -v $GITHUB_WORKSPACE/ceph:/srv/ceph \
            -e NPROC=4 \
            $DOCKERHUB_USERNAME/buildenv-radosgw:latest

      - name: Strip Build results
        if: ${{ inputs.strip_binaries }}
        run: |
          strip -s ceph/build/bin/radosgw
          strip -s ceph/build/lib/libceph-common.so
          strip -s ceph/build/lib/libradosgw.so
          strip -s ceph/build/lib/librados.so

      - name: Compress Build Results
        run: |
          tar -czvf build-results.tar.gz \
            ceph/build/bin/radosgw \
            ceph/build/lib/libceph-common.so \
            ceph/build/lib/libceph-common.so.2 \
            ceph/build/lib/libradosgw.so \
            ceph/build/lib/libradosgw.so.2 \
            ceph/build/lib/libradosgw.so.2.0.0 \
            ceph/build/lib/librados.so \
            ceph/build/lib/librados.so.2 \
            ceph/build/lib/librados.so.2.0.0

      - name: Generate Artifact Identifier
        id: artifact_id
        run: |
          ARTIFACT_ID=radosgw-$GITHUB_SHA
          echo "::set-output name=artifact_id::$ARTIFACT_ID"

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifact_id.outputs.artifact_id }}
          path: build-results.tar.gz

  build-container:
    runs-on: ubuntu-latest
    needs:
      - build
    outputs:
      short_sha: ${{ steps.short_sha.outputs.short_sha }}

    steps:
      - name: Checkout s3gw-core
        uses: actions/checkout@v3
        with:
          repository: 'aquarist-labs/s3gw-core'
          ref: 'main'
          path: 's3gw-core'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Dockerhub Login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Download Radogw Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build.outputs.artifact_id }}

      - name: Unpack Artifacts
        run: |
          tar -xvf ${{ needs.build.outputs.artifact_id }}

      - name: Generate Short SHA
        id: short_sha
        run: |
          SHA="$(echo $GITHUB_SHA | cut -c 1-12)"
          echo "::set-output name=short_sha::$SHA"

      - name: Build S3GW Container
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/s3gw:${{ steps.short_sha.outputs.short_sha }}
          file: s3gw-core/build/Dockerfile.build-container
          context: ceph/build
